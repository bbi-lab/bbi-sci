{"message":"unused variable: `hash_lookup`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":765,"byte_end":776,"line_start":23,"line_end":23,"column_start":284,"column_end":295,"is_primary":true,"text":[{"text":"fn process_fastq_file<R: Read>(hash_edit_distance: usize, hash_whitelist: &Vec<HashMap<String, String>>, cells: &mut HashSet<String>, hash_counts: &mut Vec<u64>, hashdict: &mut HashMap<String, HashMap<String, HashMap<String, u64>>>, fastq_reader: &mut Reader<R>, num_hash: &mut u64, hash_lookup: &HashMap<String, String>) -> Result<(), Box<dyn std::error::Error>> {","highlight_start":284,"highlight_end":295}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":765,"byte_end":776,"line_start":23,"line_end":23,"column_start":284,"column_end":295,"is_primary":true,"text":[{"text":"fn process_fastq_file<R: Read>(hash_edit_distance: usize, hash_whitelist: &Vec<HashMap<String, String>>, cells: &mut HashSet<String>, hash_counts: &mut Vec<u64>, hashdict: &mut HashMap<String, HashMap<String, HashMap<String, u64>>>, fastq_reader: &mut Reader<R>, num_hash: &mut u64, hash_lookup: &HashMap<String, String>) -> Result<(), Box<dyn std::error::Error>> {","highlight_start":284,"highlight_end":295}],"label":null,"suggested_replacement":"_hash_lookup","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `hash_lookup`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:23:284\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mR>, num_hash: &mut u64, hash_lookup: &HashMap<String, String>) -> Result<(), Box<dyn std::error::Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_hash_lookup`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}
