manifest.version = '2.5.0'

/*
** bbi-sci process profiles.
** Notes:
**   o  these profiles define process block-specific directives
**   o  the 'standard' profile is used by default. Alternate
**      profiles are selected on the command line, e.g.,
**
**        nextflow run -profile <my_profile> main.nf
**
**   o  the standard profile here defines directive values
**      that are used on the UW Genome Sciences computing
**      cluster.
**   o  there can be more than one configuration script, which
**      can complicate troubleshooting when the scripts behave
**      unexpectedly. The Nextflow documentation explains
**
**        When a pipeline script is launched Nextflow looks for
**        a file named nextflow.config in the current directory
**        and in the script base directory (if it is not the
**        same as the current directory). Finally it checks for
**        the file $HOME/.nextflow/config.
**
**        When more than one of the above files exist they are
**        merged, so that the settings in the first override
**        the same ones that may appear in the second one, and
**        so on.
**
**        The default config file search mechanism can be
**        extended proving an extra configuration file by using
**        the command line option -c <config file>.
**
**        It's worth noting that by doing this, the files
**        nextflow.config and $HOME/.nextflow/config are not
**        ignored and they are merged as explained above.
**
**        If you want to ignore any default configuration
**        files and use only the custom one use the command
**        line option -C <config file>.
**
**  o  selectors priority
**       When mixing generic process configuration and selectors
**       the following priority rules are applied (from lower
**       to higher):
**
**         1.  Process generic configuration.
**         2.  Process specific directive defined in the workflow
**             script.
**         3.  withLabel selector definition.
**         4.  withName selector definition.
**
**  o  a 'withName:' block defines directives used in the
**     process block with the same names.
**  o  at the BBI we use modules to access required programs
**     so we place module directives in the standard profile.
**  o  programs installed locally can be accessed by modifying
**     the PATH environment variable for the submitted jobs;
**     that is, by adding the directories in which the
**     programs can be found to PATH. Use the 'beforeScript'
**     directive for this purpose, for example
**
**       beforeScript = 'export PATH=/opt/python/bin:$PATH'
**  o  notice that the 'ext' allows one to define their own
**     process-specific variables that are accessible within
**     the process block. For example, in order to define
**     a variable called 'pass_in' for use in a process block
**     called 'do_this', add to this nextflow.config file
**     lines that look like
**
**
**  profiles {
**    my_profile {
**      process {
**
**        withName: do_this {
**          pass_in = 'Hello World'
**        }
**      }
**    }
**  }
**
** and in the main.nf script refer to pass_in within the
** do_this process block as
**
** process do_this {
**
** println( 'print this: ' + task.ext.pass_in )
** }
**
** The 'task' scope can be used to output directive values
** where one refers to the directive values as
**
**   task.memory
**   task.cpus
**   ...
**
** This can be helpful when troubleshooting.
*/
profiles {

  centos7 {
    process {
      beforeScript =  '. /etc/profile.d/modules.sh'
      executor = "sge"
      errorStrategy = "finish"
      maxForks = 20
      queue = "shendure-long.q"
//      clusterOptions = '-l centos=7'

      withName: check_sample_sheet {
        module = 'modules:modules-init:modules-gs:python/3.7.7:numpy/1.21.1'
      }

      withName: trim_fastqs {
        module = 'modules:modules-init:modules-gs:python/3.7.7:numpy/1.21.1:cutadapt/2.5:trim_galore/0.6.5'
        memory = '16 GB'
      }

      withName: gather_info {
        module = 'modules:modules-init:modules-gs:python/3.7.7:numpy/1.21.1'
        memory = '2 GB'
      }

      withName: process_hashes {
        module = 'modules:modules-init:modules-gs:python/3.7.7:numpy/1.21.1:scipy/1.2.3'
        memory = '16 GB'
      }

      withName: align_reads {
        module = 'modules:modules-init:modules-gs:STAR/2.6.1d'
        penv = 'serial'
      }

      withName: sort_and_filter {
        module = 'modules:modules-init:modules-gs:samtools/1.9'
        memory = '2 GB'
        penv = 'serial'
      }

      withName: combine_logs {
        module = 'modules:modules-init:modules-gs'
        memory = '2 GB'
      }

      withName: merge_bams {
        module = 'modules:modules-init:modules-gs:samtools/1.9'
        penv = 'serial'
      }

      withName: split_bam {
        module = 'modules:modules-init:modules-gs:samtools/1.9:bamtools/20200731:bedtools/2.27.1:python/3.7.7:numpy/1.21.1'
        memory = '8 GB'
      }

      withName: remove_dups_assign_genes {
        module = 'modules:modules-init:modules-gs:bedtools/2.27.1:python/3.7.7:numpy/1.21.1:samtools/1.9'
        memory = '48 GB'
      }

      withName: merge_assignment {
        module = 'modules:modules-init:modules-gs'
        memory = '2 GB'
      }

      withName: count_umis_by_sample {
        module = 'modules:modules-init:modules-gs:python/3.7.7:numpy/1.21.1'
        memory = '8 GB'
      }

      withName: make_matrix {
        module = 'modules:modules-init:modules-gs:python/3.7.7:numpy/1.21.1:scipy/1.2.3'
        cpus = 8
        memory = '50 GB'
        penv = 'serial'
      }

      withName: run_emptyDrops {
        module = 'modules:modules-init:modules-gs:gcc/8.1.0:pcre2/10.35:hdf5/1.10.1:R/4.0.0'
        memory = '16 GB'
      }

      withName: make_cds {
        module = 'modules:modules-init:modules-gs:gcc/8.1.0:pcre2/10.35:hdf5/1.10.1:R/4.0.0'
        memory = '50 GB'
      }

      withName: apply_garnett {
        module = 'modules:modules-init:modules-gs:gcc/8.1.0:pcre2/10.35:hdf5/1.10.1:R/4.0.0'
        memory = '16 GB'
      }

      withName: run_scrublet {
        module = 'modules:modules-init:modules-gs:python/3.7.7:numpy/1.21.1:six/1.15.0:matplotlib/3.4.2'
        memory = '32 GB'
      }

      withName: reformat_qc {
        module = 'modules:modules-init:modules-gs:python/3.7.7:numpy/1.21.1:gcc/8.1.0:pcre2/10.35:hdf5/1.10.1:R/4.0.0'
        memory = '16 GB'
      }

      withName: generate_qc_metrics {
        module = 'modules:modules-init:modules-gs:gcc/8.1.0:pcre2/10.35:hdf5/1.10.1:R/4.0.0'
        memory = '16 GB'
      }

      withName: zip_up_sample_stats {
        module = 'modules:modules-init:modules-gs'
      }

      withName: calc_cell_totals {
        module = 'modules:modules-init:modules-gs'
        memory = '2 GB'
      }

      withName: assign_hash {
        module = 'modules:modules-init:modules-gs:gcc/8.1.0:pcre2/10.35:hdf5/1.10.1:R/4.0.0'
        memory = '16 GB'
      }

      withName: calc_hash_dup_cell {
        module = 'modules:modules-init:modules-gs'
        cpus = 8
        memory = '8 GB'
        penv = 'serial'
      }

      withName: calc_tot_hash_dup {
        module = 'modules:modules-init:modules-gs:gcc/8.1.0:pcre2/10.35:hdf5/1.10.1:R/4.0.0'
        memory = '16 GB'
      }

      withName: publish_cds_and_cell_qc {
        module = 'modules:modules-init:modules-gs'
        memory = '2 GB'
      }

      withName: collapse_collision {
        module = 'modules:modules-init:modules-gs'
        memory = '2 GB'
      }

      withName: generate_dashboard {
        module = 'modules:modules-init:modules-gs:gcc/8.1.0:pcre2/10.35:hdf5/1.10.1:R/4.0.0'
        memory = '2 GB'
      }

      withName: finish_log {
        module = 'modules:modules-init:modules-gs'
      }

      withName: zip_up_log_data {
        module = 'modules:modules-init:modules-gs'
      }

    } // end of process
  }  // end of centos7 profile


  standard {
    process {
      beforeScript =  '. /etc/profile.d/modules.sh'
      executor = "sge"
      errorStrategy = "finish"
      maxForks = 20

      withName: check_sample_sheet {
        module = 'modules:modules-init:modules-gs:python/3.12.1'
      }

      withName: trim_fastqs {
        module = 'modules:modules-init:modules-gs:python/3.12.1:cutadapt/4.6:trim_galore/0.6.10'
        memory = '16 GB'
      }

      withName: gather_info {
        module = 'modules:modules-init:modules-gs:python/3.12.1'
        memory = '2 GB'
      }

      withName: process_hashes {
        module = 'modules:modules-init:modules-gs:python/3.12.1:scipy/1.12.0'
        memory = '16 GB'
        
      }

      withName: concat_hash_matrices {
        module = 'modules:modules-init:modules-gs:python/3.12.1:scipy/1.12.0'
        memory = '16 GB'
      }

      withName: align_reads {
        module = 'modules:modules-init:modules-gs:STAR/2.6.1d'
        penv = 'serial'
      }

      withName: sort_and_filter {
        module = 'modules:modules-init:modules-gs:samtools/1.19'
        memory = '2 GB'
        penv = 'serial'
      }

      withName: combine_logs {
        module = 'modules:modules-init:modules-gs'
        memory = '2 GB'
      }

      withName: merge_bams {
        module = 'modules:modules-init:modules-gs:samtools/1.19'
        penv = 'serial'
      }

      withName: split_bam {
        module = 'modules:modules-init:modules-gs:samtools/1.19:bamtools/20200731:bedtools/2.31.1:python/3.12.1'
        memory = '8 GB'
      }

      withName: remove_dups_assign_genes {
        module = 'modules:modules-init:modules-gs:bedtools/2.31.1:samtools/1.19:pysam/0.22.1:python/3.12.1'
        memory = '16 GB'
      }

      withName: merge_assignment {
        module = 'modules:modules-init:modules-gs'
        memory = '2 GB'
      }

      withName: count_umis_by_sample {
        module = 'modules:modules-init:modules-gs:python/3.12.1'
        memory = '8 GB'
      }

      withName: make_matrix {
        module = 'modules:modules-init:modules-gs:python/3.12.1:scipy/1.12.0'
        memory = '16 GB'
      }

      withName: run_emptyDrops {
        module = 'modules:modules-init:modules-gs:hdf5/1.14.3:R/4.3.2'
        memory = '16 GB'
      }

      withName: make_cds {
        module = 'modules:modules-init:modules-gs:hdf5/1.14.3:R/4.3.2'
        memory = '16 GB'
      }

      withName: apply_garnett {
        module = 'modules:modules-init:modules-gs:hdf5/1.14.3:R/4.3.2'
        memory = '16 GB'
      }

      withName: run_scrublet {
        module = 'modules:modules-init:modules-gs:python/3.12.1:matplotlib/3.8.3'
        memory = '32 GB'
      }

      withName: reformat_qc {
        module = 'modules:modules-init:modules-gs:python/3.12.1:hdf5/1.14.3:R/4.3.2'
        memory = '16 GB'
      }

      withName: generate_qc_metrics {
        module = 'modules:modules-init:modules-gs:hdf5/1.14.3:R/4.3.2'
        memory = '16 GB'
      }

      withName: zip_up_sample_stats {
        module = 'modules:modules-init:modules-gs'
      }

      withName: calc_cell_totals {
        module = 'modules:modules-init:modules-gs'
        memory = '2 GB'
      }

      withName: combine_cds {
        module = 'modules:modules-init:modules-gs:hdf5/1.14.3:R/4.3.2'
        //memory = '16G'
        memory = '64G'
      }

      withName: assign_hash {
        module = 'modules:modules-init:modules-gs:hdf5/1.14.3:R/4.3.2'
        memory = '16 GB'
      }

      withName: concat_umi_per_cell {
        module = 'modules:modules-init:modules-gs'
        memory = '2 GB'       
      }

      withName: assign_hash_rt_split {
        module = 'modules:modules-init:modules-gs:hdf5/1.14.3:R/4.3.2'
        memory = '16 GB'
     }

      withName: calc_hash_dup_cell {
        module = 'modules:modules-init:modules-gs'
        memory = 16G 
      }

      withName: calc_tot_hash_dup_combined {
        module = 'modules:modules-init:modules-gs'
        memory = 16G 
      }

      withName: calc_tot_hash_dup {
        module = 'modules:modules-init:modules-gs:hdf5/1.14.3:R/4.3.2'
        memory = '16 GB'
      }

      withName: publish_cds_and_cell_qc {
        module = 'modules:modules-init:modules-gs'
        memory = '2 GB'
      }

      withName: collapse_collision {
        module = 'modules:modules-init:modules-gs'
        memory = '2 GB'
      }

      withName: generate_dashboard {
        module = 'modules:modules-init:modules-gs:hdf5/1.14.3:R/4.3.2'
        memory = '2 GB'
      }

      withName: finish_log {
        module = 'modules:modules-init:modules-gs'
      }

      withName: zip_up_log_data {
        module = 'modules:modules-init:modules-gs'
      }

    } // end of process
  }  // end of standard profile

}  // end of profiles
